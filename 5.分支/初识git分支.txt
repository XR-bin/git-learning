1.初识分支

- git分支，就是我们自己把我们的整个文件夹分成一个一个独立的区域
- 比如
    -我在开发 **登录** 功能的时候，可以放在 `login` 分支下进行开发
    -别人开发 **列表** 功能的时候，可以放在 `list` 分支下进行开发
- 大家互不干扰，每一个功能都是一个独立的功能分支，这样开发就会好很多

- git在初始化的时候，会自动生成一个分支，叫做 `master` 是表示主要分支的意思
- 我们就可以在主分支基础上自己开辟出很多独立分支



2、创建分支
- 开辟一个分支使用 `git branch 分支名称` 指令

- 例如：我们开辟一个叫login的分支
    - git branch login

- 我们可以通过下面的指令，查看分支情况
    - git branch 
- 此时我们查看分支会发现有两个分支：master 和 我们创建的 login 
- 前面有个 `*` 号，并且有高亮显示的，表示你当前所处的分支



3、切换分支
- 我们切换所处分支使用 `git checkout 分支名称`
- 例如：我们切换到之前创建的 login 分支
    - git checkout login

- 切换到 login 分支上后我们可以在整个分支上进行 **登录** 功能的开发
- 开发完毕以后，我们就在当前分支上进行提交

- 提交以后我们进行分支切换，我们会发现
    - `master` 上面还是最初始的状态
    - 而 `login` 分支上有我们新写的 **登录** 功能的代码

- 我们按照分支把所有功能都开发完毕了以后，只要把所有代码都合并到 `master` 主分支上就行了



4、合并分支
- `git` 的合并分支，只能是把别的分支的内容合并到自己的分支上
- 使用的指令是 
    - git merge 要被合并的分支名          // 某个分支合并
    - git merge                          // 全部分支合并

- 注意：在合并分支之前，必须确认你的主分支是哪个，并切换到主分支上

- 例如：我们要把login分支合并到master上
    - git checkout master           // 先切回主分支
    - git merge login               // 把login分支都合并到master



5、删除分支
- 当项目都已经合并完分支后，并且项目没问题，那么这时分支就没用了，可以删除了

- 注意： 我们要删除某个分支时，我们必须不能再这个分支上

- 使用下面指令来删除没用的分支
    - git branch -d 分支名称

 - 例如：我们删除login分支
    - git checkout master          // 先切回主分支
    - git branch -d login          // 删除login分支



6、合并分支冲突
- 即主分支的版本更新了，而分支还在旧版本的基础上开发，当合并分支时就会发生冲突，这个时候
- 得自己手动处理代码变更。